<?xml version="1.0" encoding="UTF-8"?>
<keywordspec name="pyautogui" type="library" format="ROBOT" generated="20191018 11:07:45">
<version>0.9.47</version>
<scope>global</scope>
<namedargs>yes</namedargs>
<doc>IMPORTANT NOTE!



To use this module on Windows, you do not need anything else.

You will need PIL/Pillow to use the screenshot features.</doc>
<kw name="Alert">
<arguments>
<arg>text=</arg>
<arg>title=</arg>
<arg>button=OK</arg>
<arg>root=None</arg>
<arg>timeout=None</arg>
<arg>icon=0</arg>
<arg>_tkinter=False</arg>
</arguments>
<doc>Displays a simple message box with text and a single OK button. Returns the text of the button clicked on.</doc>
<tags>
</tags>
</kw>
<kw name="Center">
<arguments>
<arg>coords</arg>
</arguments>
<doc></doc>
<tags>
</tags>
</kw>
<kw name="Click">
<arguments>
<arg>x=None</arg>
<arg>y=None</arg>
<arg>clicks=1</arg>
<arg>interval=0.0</arg>
<arg>button=primary</arg>
<arg>duration=0.0</arg>
<arg>tween=&lt;function linear at 0x08CCA8A0&gt;</arg>
<arg>pause=None</arg>
<arg>logScreenshot=None</arg>
<arg>_pause=True</arg>
</arguments>
<doc>Performs pressing a mouse button down and then immediately releasing it.

The x and y parameters detail where the mouse event happens. If None, the
current mouse position is used. If a float value, it is rounded down. If
outside the boundaries of the screen, the event happens at edge of the
screen.

Args:
  x (int, float, None, tuple, str, optional): The x position on the screen where
    the click happens. None by default. If tuple, this is used for x and y.
    If x is a str, it's considered a filename of an image to find on
    the screen with locateOnScreen() and click the center of.
  y (int, float, None, optional): The y position on the screen where the
    click happens. None by default.
  clicks (int, optional): The number of clicks to perform. 1 by default.
    For example, passing 2 would do a doubleclick.
  interval (float, optional): The number of seconds in between each click,
    if the number of clicks is greater than 1. 0.0 by default, for no
    pause in between clicks.
  button (str, int, optional): The mouse button clicked. TODO

Returns:
  None

Raises:
  ValueError: If button is not one of 'left', 'middle', 'right', 1, 2, 3</doc>
<tags>
</tags>
</kw>
<kw name="Confirm">
<arguments>
<arg>text=</arg>
<arg>title=</arg>
<arg>buttons=('OK', 'Cancel')</arg>
<arg>root=None</arg>
<arg>timeout=None</arg>
<arg>icon=32</arg>
<arg>_tkinter=False</arg>
</arguments>
<doc>Displays a message box with OK and Cancel buttons. Number and text of buttons can be customized. Returns the text of the button clicked on.</doc>
<tags>
</tags>
</kw>
<kw name="Countdown">
<arguments>
<arg>seconds</arg>
</arguments>
<doc></doc>
<tags>
</tags>
</kw>
<kw name="Display Mouse Position">
<arguments>
<arg>xOffset=0</arg>
<arg>yOffset=0</arg>
</arguments>
<doc>This function is meant to be run from the command line. It will
automatically display the location and RGB of the mouse cursor.</doc>
<tags>
</tags>
</kw>
<kw name="Double Click">
<arguments>
<arg>x=None</arg>
<arg>y=None</arg>
<arg>interval=0.0</arg>
<arg>button=left</arg>
<arg>duration=0.0</arg>
<arg>tween=&lt;function linear at 0x08CCA8A0&gt;</arg>
<arg>pause=None</arg>
<arg>logScreenshot=None</arg>
<arg>_pause=True</arg>
</arguments>
<doc>Performs a double click.

This is a wrapper function for click('left', x, y, 2, interval).

The x and y parameters detail where the mouse event happens. If None, the
current mouse position is used. If a float value, it is rounded down. If
outside the boundaries of the screen, the event happens at edge of the
screen.

Args:
  x (int, float, None, tuple, optional): The x position on the screen where the
    click happens. None by default. If tuple, this is used for x and y.
    If x is a str, it's considered a filename of an image to find on
    the screen with locateOnScreen() and click the center of.
  y (int, float, None, optional): The y position on the screen where the
    click happens. None by default.
  interval (float, optional): The number of seconds in between each click,
    if the number of clicks is greater than 1. 0.0 by default, for no
    pause in between clicks.
  button (str, int, optional): The mouse button released. TODO

Returns:
  None

Raises:
  ValueError: If button is not one of 'left', 'middle', 'right', 1, 2, 3, 4,
    5, 6, or 7</doc>
<tags>
</tags>
</kw>
<kw name="Drag">
<arguments>
<arg>xOffset=0</arg>
<arg>yOffset=0</arg>
<arg>duration=0.0</arg>
<arg>tween=&lt;function linear at 0x08CCA8A0&gt;</arg>
<arg>button=primary</arg>
<arg>pause=None</arg>
<arg>logScreenshot=None</arg>
<arg>_pause=True</arg>
<arg>mouseDownUp=True</arg>
</arguments>
<doc>Performs a mouse drag (mouse movement while a button is held down) to a
point on the screen, relative to its current position.

The x and y parameters detail where the mouse event happens. If None, the
current mouse position is used. If a float value, it is rounded down. If
outside the boundaries of the screen, the event happens at edge of the
screen.

Args:
  x (int, float, None, tuple, optional): How far left (for negative values) or
    right (for positive values) to move the cursor. 0 by default. If tuple, this is used for xOffset and yOffset.
  y (int, float, None, optional): How far up (for negative values) or
    down (for positive values) to move the cursor. 0 by default.
  duration (float, optional): The amount of time it takes to move the mouse
    cursor to the new xy coordinates. If 0, then the mouse cursor is moved
    instantaneously. 0.0 by default.
  tween (func, optional): The tweening function used if the duration is not
    0. A linear tween is used by default. See the tweens.py file for
    details.
  button (str, int, optional): The mouse button released. TODO
  mouseDownUp (True, False): When true, the mouseUp/Down actions are not perfomed.
    Which allows dragging over multiple (small) actions. 'True' by default.

Returns:
  None</doc>
<tags>
</tags>
</kw>
<kw name="Drag Rel">
<arguments>
<arg>xOffset=0</arg>
<arg>yOffset=0</arg>
<arg>duration=0.0</arg>
<arg>tween=&lt;function linear at 0x08CCA8A0&gt;</arg>
<arg>button=primary</arg>
<arg>pause=None</arg>
<arg>logScreenshot=None</arg>
<arg>_pause=True</arg>
<arg>mouseDownUp=True</arg>
</arguments>
<doc>Performs a mouse drag (mouse movement while a button is held down) to a
point on the screen, relative to its current position.

The x and y parameters detail where the mouse event happens. If None, the
current mouse position is used. If a float value, it is rounded down. If
outside the boundaries of the screen, the event happens at edge of the
screen.

Args:
  x (int, float, None, tuple, optional): How far left (for negative values) or
    right (for positive values) to move the cursor. 0 by default. If tuple, this is used for xOffset and yOffset.
  y (int, float, None, optional): How far up (for negative values) or
    down (for positive values) to move the cursor. 0 by default.
  duration (float, optional): The amount of time it takes to move the mouse
    cursor to the new xy coordinates. If 0, then the mouse cursor is moved
    instantaneously. 0.0 by default.
  tween (func, optional): The tweening function used if the duration is not
    0. A linear tween is used by default. See the tweens.py file for
    details.
  button (str, int, optional): The mouse button released. TODO
  mouseDownUp (True, False): When true, the mouseUp/Down actions are not perfomed.
    Which allows dragging over multiple (small) actions. 'True' by default.

Returns:
  None</doc>
<tags>
</tags>
</kw>
<kw name="Drag To">
<arguments>
<arg>x=None</arg>
<arg>y=None</arg>
<arg>duration=0.0</arg>
<arg>tween=&lt;function linear at 0x08CCA8A0&gt;</arg>
<arg>button=primary</arg>
<arg>pause=None</arg>
<arg>logScreenshot=None</arg>
<arg>_pause=True</arg>
<arg>mouseDownUp=True</arg>
</arguments>
<doc>Performs a mouse drag (mouse movement while a button is held down) to a
point on the screen.

The x and y parameters detail where the mouse event happens. If None, the
current mouse position is used. If a float value, it is rounded down. If
outside the boundaries of the screen, the event happens at edge of the
screen.

Args:
  x (int, float, None, tuple, optional): How far left (for negative values) or
    right (for positive values) to move the cursor. 0 by default. If tuple, this is used for x and y.
    If x is a str, it's considered a filename of an image to find on
    the screen with locateOnScreen() and click the center of.
  y (int, float, None, optional): How far up (for negative values) or
    down (for positive values) to move the cursor. 0 by default.
  duration (float, optional): The amount of time it takes to move the mouse
    cursor to the new xy coordinates. If 0, then the mouse cursor is moved
    instantaneously. 0.0 by default.
  tween (func, optional): The tweening function used if the duration is not
    0. A linear tween is used by default. See the tweens.py file for
    details.
  button (str, int, optional): The mouse button released. TODO
  mouseDownUp (True, False): When true, the mouseUp/Down actions are not perfomed.
    Which allows dragging over multiple (small) actions. 'True' by default.

Returns:
  None</doc>
<tags>
</tags>
</kw>
<kw name="Ease In Back">
<arguments>
<arg>n</arg>
<arg>s=1.70158</arg>
</arguments>
<doc>A tween function that backs up first at the start and then goes to the destination.

Args:
  n (float): The time progress, starting at 0.0 and ending at 1.0.

Returns:
  (float) The line progress, starting at 0.0 and ending at 1.0. Suitable for passing to getPointOnLine().</doc>
<tags>
</tags>
</kw>
<kw name="Ease In Bounce">
<arguments>
<arg>n</arg>
</arguments>
<doc>A bouncing tween function that begins bouncing and then jumps to the destination.

Args:
  n (float): The time progress, starting at 0.0 and ending at 1.0.

Returns:
  (float) The line progress, starting at 0.0 and ending at 1.0. Suitable for passing to getPointOnLine().</doc>
<tags>
</tags>
</kw>
<kw name="Ease In Circ">
<arguments>
<arg>n</arg>
</arguments>
<doc>A circular tween function that begins slow and then accelerates.

Args:
  n (float): The time progress, starting at 0.0 and ending at 1.0.

Returns:
  (float) The line progress, starting at 0.0 and ending at 1.0. Suitable for passing to getPointOnLine().</doc>
<tags>
</tags>
</kw>
<kw name="Ease In Cubic">
<arguments>
<arg>n</arg>
</arguments>
<doc>A cubic tween function that begins slow and then accelerates.

Args:
  n (float): The time progress, starting at 0.0 and ending at 1.0.

Returns:
  (float) The line progress, starting at 0.0 and ending at 1.0. Suitable for passing to getPointOnLine().</doc>
<tags>
</tags>
</kw>
<kw name="Ease In Elastic">
<arguments>
<arg>n</arg>
<arg>amplitude=1</arg>
<arg>period=0.3</arg>
</arguments>
<doc>An elastic tween function that begins with an increasing wobble and then snaps into the destination.

Args:
  n (float): The time progress, starting at 0.0 and ending at 1.0.

Returns:
  (float) The line progress, starting at 0.0 and ending at 1.0. Suitable for passing to getPointOnLine().</doc>
<tags>
</tags>
</kw>
<kw name="Ease In Expo">
<arguments>
<arg>n</arg>
</arguments>
<doc>An exponential tween function that begins slow and then accelerates.

Args:
  n (float): The time progress, starting at 0.0 and ending at 1.0.

Returns:
  (float) The line progress, starting at 0.0 and ending at 1.0. Suitable for passing to getPointOnLine().</doc>
<tags>
</tags>
</kw>
<kw name="Ease In Out Back">
<arguments>
<arg>n</arg>
<arg>s=1.70158</arg>
</arguments>
<doc>A "back-in" tween function that overshoots both the start and destination.

Args:
  n (float): The time progress, starting at 0.0 and ending at 1.0.

Returns:
  (float) The line progress, starting at 0.0 and ending at 1.0. Suitable for passing to getPointOnLine().</doc>
<tags>
</tags>
</kw>
<kw name="Ease In Out Bounce">
<arguments>
<arg>n</arg>
</arguments>
<doc>A bouncing tween function that bounces at the start and end.

Args:
  n (float): The time progress, starting at 0.0 and ending at 1.0.

Returns:
  (float) The line progress, starting at 0.0 and ending at 1.0. Suitable for passing to getPointOnLine().</doc>
<tags>
</tags>
</kw>
<kw name="Ease In Out Circ">
<arguments>
<arg>n</arg>
</arguments>
<doc>A circular tween function that accelerates, reaches the midpoint, and then decelerates.

Args:
  n (float): The time progress, starting at 0.0 and ending at 1.0.

Returns:
  (float) The line progress, starting at 0.0 and ending at 1.0. Suitable for passing to getPointOnLine().</doc>
<tags>
</tags>
</kw>
<kw name="Ease In Out Cubic">
<arguments>
<arg>n</arg>
</arguments>
<doc>A cubic tween function that accelerates, reaches the midpoint, and then decelerates.

Args:
  n (float): The time progress, starting at 0.0 and ending at 1.0.

Returns:
  (float) The line progress, starting at 0.0 and ending at 1.0. Suitable for passing to getPointOnLine().</doc>
<tags>
</tags>
</kw>
<kw name="Ease In Out Elastic">
<arguments>
<arg>n</arg>
<arg>amplitude=1</arg>
<arg>period=0.5</arg>
</arguments>
<doc>An elastic tween function wobbles towards the midpoint.

Args:
  n (float): The time progress, starting at 0.0 and ending at 1.0.

Returns:
  (float) The line progress, starting at 0.0 and ending at 1.0. Suitable for passing to getPointOnLine().</doc>
<tags>
</tags>
</kw>
<kw name="Ease In Out Expo">
<arguments>
<arg>n</arg>
</arguments>
<doc>An exponential tween function that accelerates, reaches the midpoint, and then decelerates.

Args:
  n (float): The time progress, starting at 0.0 and ending at 1.0.

Returns:
  (float) The line progress, starting at 0.0 and ending at 1.0. Suitable for passing to getPointOnLine().</doc>
<tags>
</tags>
</kw>
<kw name="Ease In Out Quad">
<arguments>
<arg>n</arg>
</arguments>
<doc>A quadratic tween function that accelerates, reaches the midpoint, and then decelerates.

Args:
  n (float): The time progress, starting at 0.0 and ending at 1.0.

Returns:
  (float) The line progress, starting at 0.0 and ending at 1.0. Suitable for passing to getPointOnLine().</doc>
<tags>
</tags>
</kw>
<kw name="Ease In Out Quart">
<arguments>
<arg>n</arg>
</arguments>
<doc>A quartic tween function that accelerates, reaches the midpoint, and then decelerates.

Args:
  n (float): The time progress, starting at 0.0 and ending at 1.0.

Returns:
  (float) The line progress, starting at 0.0 and ending at 1.0. Suitable for passing to getPointOnLine().</doc>
<tags>
</tags>
</kw>
<kw name="Ease In Out Quint">
<arguments>
<arg>n</arg>
</arguments>
<doc>A quintic tween function that accelerates, reaches the midpoint, and then decelerates.

Args:
  n (float): The time progress, starting at 0.0 and ending at 1.0.

Returns:
  (float) The line progress, starting at 0.0 and ending at 1.0. Suitable for passing to getPointOnLine().</doc>
<tags>
</tags>
</kw>
<kw name="Ease In Out Sine">
<arguments>
<arg>n</arg>
</arguments>
<doc>A sinusoidal tween function that accelerates, reaches the midpoint, and then decelerates.

Args:
  n (float): The time progress, starting at 0.0 and ending at 1.0.

Returns:
  (float) The line progress, starting at 0.0 and ending at 1.0. Suitable for passing to getPointOnLine().</doc>
<tags>
</tags>
</kw>
<kw name="Ease In Quad">
<arguments>
<arg>n</arg>
</arguments>
<doc>A quadratic tween function that begins slow and then accelerates.

Args:
  n (float): The time progress, starting at 0.0 and ending at 1.0.

Returns:
  (float) The line progress, starting at 0.0 and ending at 1.0. Suitable for passing to getPointOnLine().</doc>
<tags>
</tags>
</kw>
<kw name="Ease In Quart">
<arguments>
<arg>n</arg>
</arguments>
<doc>A quartic tween function that begins slow and then accelerates.

Args:
  n (float): The time progress, starting at 0.0 and ending at 1.0.

Returns:
  (float) The line progress, starting at 0.0 and ending at 1.0. Suitable for passing to getPointOnLine().</doc>
<tags>
</tags>
</kw>
<kw name="Ease In Quint">
<arguments>
<arg>n</arg>
</arguments>
<doc>A quintic tween function that begins slow and then accelerates.

Args:
  n (float): The time progress, starting at 0.0 and ending at 1.0.

Returns:
  (float) The line progress, starting at 0.0 and ending at 1.0. Suitable for passing to getPointOnLine().</doc>
<tags>
</tags>
</kw>
<kw name="Ease In Sine">
<arguments>
<arg>n</arg>
</arguments>
<doc>A sinusoidal tween function that begins slow and then accelerates.

Args:
  n (float): The time progress, starting at 0.0 and ending at 1.0.

Returns:
  (float) The line progress, starting at 0.0 and ending at 1.0. Suitable for passing to getPointOnLine().</doc>
<tags>
</tags>
</kw>
<kw name="Ease Out Back">
<arguments>
<arg>n</arg>
<arg>s=1.70158</arg>
</arguments>
<doc>A tween function that overshoots the destination a little and then backs into the destination.

Args:
  n (float): The time progress, starting at 0.0 and ending at 1.0.

Returns:
  (float) The line progress, starting at 0.0 and ending at 1.0. Suitable for passing to getPointOnLine().</doc>
<tags>
</tags>
</kw>
<kw name="Ease Out Bounce">
<arguments>
<arg>n</arg>
</arguments>
<doc>A bouncing tween function that hits the destination and then bounces to rest.

Args:
  n (float): The time progress, starting at 0.0 and ending at 1.0.

Returns:
  (float) The line progress, starting at 0.0 and ending at 1.0. Suitable for passing to getPointOnLine().</doc>
<tags>
</tags>
</kw>
<kw name="Ease Out Circ">
<arguments>
<arg>n</arg>
</arguments>
<doc>A circular tween function that begins fast and then decelerates.

Args:
  n (float): The time progress, starting at 0.0 and ending at 1.0.

Returns:
  (float) The line progress, starting at 0.0 and ending at 1.0. Suitable for passing to getPointOnLine().</doc>
<tags>
</tags>
</kw>
<kw name="Ease Out Cubic">
<arguments>
<arg>n</arg>
</arguments>
<doc>A cubic tween function that begins fast and then decelerates.

Args:
  n (float): The time progress, starting at 0.0 and ending at 1.0.

Returns:
  (float) The line progress, starting at 0.0 and ending at 1.0. Suitable for passing to getPointOnLine().</doc>
<tags>
</tags>
</kw>
<kw name="Ease Out Elastic">
<arguments>
<arg>n</arg>
<arg>amplitude=1</arg>
<arg>period=0.3</arg>
</arguments>
<doc>An elastic tween function that overshoots the destination and then "rubber bands" into the destination.

Args:
  n (float): The time progress, starting at 0.0 and ending at 1.0.

Returns:
  (float) The line progress, starting at 0.0 and ending at 1.0. Suitable for passing to getPointOnLine().</doc>
<tags>
</tags>
</kw>
<kw name="Ease Out Expo">
<arguments>
<arg>n</arg>
</arguments>
<doc>An exponential tween function that begins fast and then decelerates.

Args:
  n (float): The time progress, starting at 0.0 and ending at 1.0.

Returns:
  (float) The line progress, starting at 0.0 and ending at 1.0. Suitable for passing to getPointOnLine().</doc>
<tags>
</tags>
</kw>
<kw name="Ease Out Quad">
<arguments>
<arg>n</arg>
</arguments>
<doc>A quadratic tween function that begins fast and then decelerates.

Args:
  n (float): The time progress, starting at 0.0 and ending at 1.0.

Returns:
  (float) The line progress, starting at 0.0 and ending at 1.0. Suitable for passing to getPointOnLine().</doc>
<tags>
</tags>
</kw>
<kw name="Ease Out Quart">
<arguments>
<arg>n</arg>
</arguments>
<doc>A quartic tween function that begins fast and then decelerates.

Args:
  n (float): The time progress, starting at 0.0 and ending at 1.0.

Returns:
  (float) The line progress, starting at 0.0 and ending at 1.0. Suitable for passing to getPointOnLine().</doc>
<tags>
</tags>
</kw>
<kw name="Ease Out Quint">
<arguments>
<arg>n</arg>
</arguments>
<doc>A quintic tween function that begins fast and then decelerates.

Args:
  n (float): The time progress, starting at 0.0 and ending at 1.0.

Returns:
  (float) The line progress, starting at 0.0 and ending at 1.0. Suitable for passing to getPointOnLine().</doc>
<tags>
</tags>
</kw>
<kw name="Ease Out Sine">
<arguments>
<arg>n</arg>
</arguments>
<doc>A sinusoidal tween function that begins fast and then decelerates.

Args:
  n (float): The time progress, starting at 0.0 and ending at 1.0.

Returns:
  (float) The line progress, starting at 0.0 and ending at 1.0. Suitable for passing to getPointOnLine().</doc>
<tags>
</tags>
</kw>
<kw name="Get Active Window">
<arguments>
</arguments>
<doc>Returns a Window object of the currently active Window.</doc>
<tags>
</tags>
</kw>
<kw name="Get All Titles">
<arguments>
</arguments>
<doc>Returns a list of strings of window titles for all visible windows.</doc>
<tags>
</tags>
</kw>
<kw name="Get All Windows">
<arguments>
</arguments>
<doc>Returns a list of Window objects for all visible windows.</doc>
<tags>
</tags>
</kw>
<kw name="Get Point On Line">
<arguments>
<arg>x1</arg>
<arg>y1</arg>
<arg>x2</arg>
<arg>y2</arg>
<arg>n</arg>
</arguments>
<doc>Returns the (x, y) tuple of the point that has progressed a proportion
n along the line defined by the two x, y coordinates.

Copied from pytweening module.</doc>
<tags>
</tags>
</kw>
<kw name="Get Windows At">
<arguments>
<arg>x</arg>
<arg>y</arg>
</arguments>
<doc>Returns a list of Window objects

Args:
  x (int, optional): The x position of the window(s).
  y (int, optional): The y position of the window(s).</doc>
<tags>
</tags>
</kw>
<kw name="Get Windows With Title">
<arguments>
<arg>title</arg>
</arguments>
<doc>Returns a list of Window objects that substring match the title.</doc>
<tags>
</tags>
</kw>
<kw name="Grab">
<arguments>
<arg>imageFilename=None</arg>
<arg>region=None</arg>
</arguments>
<doc></doc>
<tags>
</tags>
</kw>
<kw name="Hotkey">
<arguments>
<arg>*args</arg>
<arg>**kwargs</arg>
</arguments>
<doc>Performs key down presses on the arguments passed in order, then performs
key releases in reverse order.

The effect is that calling hotkey('ctrl', 'shift', 'c') would perform a
"Ctrl-Shift-C" hotkey/keyboard shortcut press.

Args:
  key(s) (str): The series of keys to press, in order. This can also be a
    list of key strings to press.
  interval (float, optional): The number of seconds in between each press.
    0.0 by default, for no pause in between presses.

Returns:
  None</doc>
<tags>
</tags>
</kw>
<kw name="Hscroll">
<arguments>
<arg>clicks</arg>
<arg>x=None</arg>
<arg>y=None</arg>
<arg>pause=None</arg>
<arg>logScreenshot=None</arg>
<arg>_pause=True</arg>
</arguments>
<doc>Performs an explicitly horizontal scroll of the mouse scroll wheel,
if this is supported by the operating system. (Currently just Linux.)

The x and y parameters detail where the mouse event happens. If None, the
current mouse position is used. If a float value, it is rounded down. If
outside the boundaries of the screen, the event happens at edge of the
screen.

Args:
  clicks (int, float): The amount of scrolling to perform.
  x (int, float, None, tuple, optional): The x position on the screen where the
    click happens. None by default. If tuple, this is used for x and y.
  y (int, float, None, optional): The y position on the screen where the
    click happens. None by default.

Returns:
  None</doc>
<tags>
</tags>
</kw>
<kw name="Is Shift Character">
<arguments>
<arg>character</arg>
</arguments>
<doc>Returns True if the key character is uppercase or shifted.</doc>
<tags>
</tags>
</kw>
<kw name="Is Valid Key">
<arguments>
<arg>key</arg>
</arguments>
<doc>Returns a Boolean value if the given key is a valid value to pass to
PyAutoGUI's keyboard-related functions for the current platform.

This function is here because passing an invalid value to the PyAutoGUI
keyboard functions currently is a no-op that does not raise an exception.

Some keys are only valid on some platforms. For example, while 'esc' is
valid for the Escape key on all platforms, 'browserback' is only used on
Windows operating systems.

Args:
  key (str): The key value.

Returns:
  bool: True if key is a valid value, False if not.</doc>
<tags>
</tags>
</kw>
<kw name="Key Down">
<arguments>
<arg>key</arg>
<arg>pause=None</arg>
<arg>logScreenshot=None</arg>
<arg>_pause=True</arg>
</arguments>
<doc>Performs a keyboard key press without the release. This will put that
key in a held down state.

NOTE: For some reason, this does not seem to cause key repeats like would
happen if a keyboard key was held down on a text field.

Args:
  key (str): The key to be pressed down. The valid names are listed in
  KEYBOARD_KEYS.

Returns:
  None</doc>
<tags>
</tags>
</kw>
<kw name="Key Up">
<arguments>
<arg>key</arg>
<arg>pause=None</arg>
<arg>logScreenshot=None</arg>
<arg>_pause=True</arg>
</arguments>
<doc>Performs a keyboard key release (without the press down beforehand).

Args:
  key (str): The key to be released up. The valid names are listed in
  KEYBOARD_KEYS.

Returns:
  None</doc>
<tags>
</tags>
</kw>
<kw name="Left Click">
<arguments>
<arg>x=None</arg>
<arg>y=None</arg>
<arg>interval=0.0</arg>
<arg>duration=0.0</arg>
<arg>tween=&lt;function linear at 0x08CCA8A0&gt;</arg>
<arg>pause=None</arg>
<arg>logScreenshot=None</arg>
<arg>_pause=True</arg>
</arguments>
<doc>Performs a right mouse button click.

This is a wrapper function for click('right', x, y).

The x and y parameters detail where the mouse event happens. If None, the
current mouse position is used. If a float value, it is rounded down. If
outside the boundaries of the screen, the event happens at edge of the
screen.

Args:
  x (int, float, None, tuple, optional): The x position on the screen where the
    click happens. None by default. If tuple, this is used for x and y.
    If x is a str, it's considered a filename of an image to find on
    the screen with locateOnScreen() and click the center of.
  y (int, float, None, optional): The y position on the screen where the
    click happens. None by default.
  interval (float, optional): The number of seconds in between each click,
    if the number of clicks is greater than 1. 0.0 by default, for no
    pause in between clicks.

Returns:
  None</doc>
<tags>
</tags>
</kw>
<kw name="Linear">
<arguments>
<arg>n</arg>
</arguments>
<doc>Trivial linear tweening function.

Copied from pytweening module.</doc>
<tags>
</tags>
</kw>
<kw name="Locate">
<arguments>
<arg>needleImage</arg>
<arg>haystackImage</arg>
<arg>**kwargs</arg>
</arguments>
<doc></doc>
<tags>
</tags>
</kw>
<kw name="Locate All">
<arguments>
<arg>needleImage</arg>
<arg>haystackImage</arg>
<arg>grayscale=None</arg>
<arg>limit=10000</arg>
<arg>region=None</arg>
<arg>step=1</arg>
<arg>confidence=0.999</arg>
</arguments>
<doc>faster but more memory-intensive than pure python
step 2 skips every other row and column = ~3x faster but prone to miss;
    to compensate, the algorithm automatically reduces the confidence
    threshold by 5% (which helps but will not avoid all misses).
limitations:
  - OpenCV 3.x &amp; python 3.x not tested
  - RGBA images are treated as RBG (ignores alpha channel)</doc>
<tags>
</tags>
</kw>
<kw name="Locate All On Screen">
<arguments>
<arg>image</arg>
<arg>**kwargs</arg>
</arguments>
<doc></doc>
<tags>
</tags>
</kw>
<kw name="Locate Center On Screen">
<arguments>
<arg>image</arg>
<arg>**kwargs</arg>
</arguments>
<doc></doc>
<tags>
</tags>
</kw>
<kw name="Locate On Screen">
<arguments>
<arg>image</arg>
<arg>minSearchTime=0</arg>
<arg>**kwargs</arg>
</arguments>
<doc>minSearchTime - amount of time in seconds to repeat taking
screenshots and trying to locate a match.  The default of 0 performs
a single search.</doc>
<tags>
</tags>
</kw>
<kw name="Middle Click">
<arguments>
<arg>x=None</arg>
<arg>y=None</arg>
<arg>interval=0.0</arg>
<arg>duration=0.0</arg>
<arg>tween=&lt;function linear at 0x08CCA8A0&gt;</arg>
<arg>pause=None</arg>
<arg>logScreenshot=None</arg>
<arg>_pause=True</arg>
</arguments>
<doc>Performs a middle mouse button click.

This is a wrapper function for click('right', x, y).

The x and y parameters detail where the mouse event happens. If None, the
current mouse position is used. If a float value, it is rounded down. If
outside the boundaries of the screen, the event happens at edge of the
screen.

Args:
  x (int, float, None, tuple, optional): The x position on the screen where the
    click happens. None by default. If tuple, this is used for x and y.
    If x is a str, it's considered a filename of an image to find on
    the screen with locateOnScreen() and click the center of.
  y (int, float, None, optional): The y position on the screen where the
    click happens. None by default.

Returns:
  None</doc>
<tags>
</tags>
</kw>
<kw name="Mouse Down">
<arguments>
<arg>x=None</arg>
<arg>y=None</arg>
<arg>button=primary</arg>
<arg>duration=0.0</arg>
<arg>tween=&lt;function linear at 0x08CCA8A0&gt;</arg>
<arg>pause=None</arg>
<arg>logScreenshot=None</arg>
<arg>_pause=True</arg>
</arguments>
<doc>Performs pressing a mouse button down (but not up).

The x and y parameters detail where the mouse event happens. If None, the
current mouse position is used. If a float value, it is rounded down. If
outside the boundaries of the screen, the event happens at edge of the
screen.

Args:
  x (int, float, None, tuple, optional): The x position on the screen where the
    mouse down happens. None by default. If tuple, this is used for x and y.
    If x is a str, it's considered a filename of an image to find on
    the screen with locateOnScreen() and click the center of.
  y (int, float, None, optional): The y position on the screen where the
    mouse down happens. None by default.
  button (str, int, optional): The mouse button pressed down. TODO

Returns:
  None

Raises:
  ValueError: If button is not one of 'left', 'middle', 'right', 1, 2, or 3</doc>
<tags>
</tags>
</kw>
<kw name="Mouse Info">
<arguments>
</arguments>
<doc></doc>
<tags>
</tags>
</kw>
<kw name="Mouse Up">
<arguments>
<arg>x=None</arg>
<arg>y=None</arg>
<arg>button=primary</arg>
<arg>duration=0.0</arg>
<arg>tween=&lt;function linear at 0x08CCA8A0&gt;</arg>
<arg>pause=None</arg>
<arg>logScreenshot=None</arg>
<arg>_pause=True</arg>
</arguments>
<doc>Performs releasing a mouse button up (but not down beforehand).

The x and y parameters detail where the mouse event happens. If None, the
current mouse position is used. If a float value, it is rounded down. If
outside the boundaries of the screen, the event happens at edge of the
screen.

Args:
  x (int, float, None, tuple, optional): The x position on the screen where the
    mouse up happens. None by default. If tuple, this is used for x and y.
    If x is a str, it's considered a filename of an image to find on
    the screen with locateOnScreen() and click the center of.
  y (int, float, None, optional): The y position on the screen where the
    mouse up happens. None by default.
  button (str, int, optional): The mouse button released. TODO

Returns:
  None

Raises:
  ValueError: If button is not one of 'left', 'middle', 'right', 1, 2, or 3</doc>
<tags>
</tags>
</kw>
<kw name="Move">
<arguments>
<arg>xOffset=None</arg>
<arg>yOffset=None</arg>
<arg>duration=0.0</arg>
<arg>tween=&lt;function linear at 0x08CCA8A0&gt;</arg>
<arg>pause=None</arg>
<arg>logScreenshot=False</arg>
<arg>_pause=True</arg>
</arguments>
<doc>Moves the mouse cursor to a point on the screen, relative to its current
position.

The x and y parameters detail where the mouse event happens. If None, the
current mouse position is used. If a float value, it is rounded down. If
outside the boundaries of the screen, the event happens at edge of the
screen.

Args:
  x (int, float, None, tuple, optional): How far left (for negative values) or
    right (for positive values) to move the cursor. 0 by default. If tuple, this is used for x and y.
  y (int, float, None, optional): How far up (for negative values) or
    down (for positive values) to move the cursor. 0 by default.
  duration (float, optional): The amount of time it takes to move the mouse
    cursor to the new xy coordinates. If 0, then the mouse cursor is moved
    instantaneously. 0.0 by default.
  tween (func, optional): The tweening function used if the duration is not
    0. A linear tween is used by default. See the tweens.py file for
    details.

Returns:
  None</doc>
<tags>
</tags>
</kw>
<kw name="Move Rel">
<arguments>
<arg>xOffset=None</arg>
<arg>yOffset=None</arg>
<arg>duration=0.0</arg>
<arg>tween=&lt;function linear at 0x08CCA8A0&gt;</arg>
<arg>pause=None</arg>
<arg>logScreenshot=False</arg>
<arg>_pause=True</arg>
</arguments>
<doc>Moves the mouse cursor to a point on the screen, relative to its current
position.

The x and y parameters detail where the mouse event happens. If None, the
current mouse position is used. If a float value, it is rounded down. If
outside the boundaries of the screen, the event happens at edge of the
screen.

Args:
  x (int, float, None, tuple, optional): How far left (for negative values) or
    right (for positive values) to move the cursor. 0 by default. If tuple, this is used for x and y.
  y (int, float, None, optional): How far up (for negative values) or
    down (for positive values) to move the cursor. 0 by default.
  duration (float, optional): The amount of time it takes to move the mouse
    cursor to the new xy coordinates. If 0, then the mouse cursor is moved
    instantaneously. 0.0 by default.
  tween (func, optional): The tweening function used if the duration is not
    0. A linear tween is used by default. See the tweens.py file for
    details.

Returns:
  None</doc>
<tags>
</tags>
</kw>
<kw name="Move To">
<arguments>
<arg>x=None</arg>
<arg>y=None</arg>
<arg>duration=0.0</arg>
<arg>tween=&lt;function linear at 0x08CCA8A0&gt;</arg>
<arg>pause=None</arg>
<arg>logScreenshot=False</arg>
<arg>_pause=True</arg>
</arguments>
<doc>Moves the mouse cursor to a point on the screen.

The x and y parameters detail where the mouse event happens. If None, the
current mouse position is used. If a float value, it is rounded down. If
outside the boundaries of the screen, the event happens at edge of the
screen.

Args:
  x (int, float, None, tuple, optional): The x position on the screen where the
    click happens. None by default. If tuple, this is used for x and y.
    If x is a str, it's considered a filename of an image to find on
    the screen with locateOnScreen() and click the center of.
  y (int, float, None, optional): The y position on the screen where the
    click happens. None by default.
  duration (float, optional): The amount of time it takes to move the mouse
    cursor to the xy coordinates. If 0, then the mouse cursor is moved
    instantaneously. 0.0 by default.
  tween (func, optional): The tweening function used if the duration is not
    0. A linear tween is used by default. See the tweens.py file for
    details.

Returns:
  None</doc>
<tags>
</tags>
</kw>
<kw name="On Screen">
<arguments>
<arg>x</arg>
<arg>y=None</arg>
</arguments>
<doc>Returns whether the given xy coordinates are on the primary screen or not.

Note that this function doesn't work for secondary screens.

Args:
  Either the arguments are two separate values, first arg for x and second
    for y, or there is a single argument of a sequence with two values, the
    first x and the second y.
    Example: onScreen(x, y) or onScreen([x, y])

Returns:
  bool: True if the xy coordinates are on the screen at its current
    resolution, otherwise False.</doc>
<tags>
</tags>
</kw>
<kw name="Password">
<arguments>
<arg>text=</arg>
<arg>title=</arg>
<arg>default=</arg>
<arg>mask=*</arg>
<arg>root=None</arg>
<arg>timeout=None</arg>
</arguments>
<doc>Displays a message box with text input, and OK &amp; Cancel buttons. Typed characters appear as *. Returns the text entered, or None if Cancel was clicked.</doc>
<tags>
</tags>
</kw>
<kw name="Pixel">
<arguments>
<arg>x</arg>
<arg>y</arg>
</arguments>
<doc></doc>
<tags>
</tags>
</kw>
<kw name="Pixel Matches Color">
<arguments>
<arg>x</arg>
<arg>y</arg>
<arg>expectedRGBColor</arg>
<arg>tolerance=0</arg>
</arguments>
<doc></doc>
<tags>
</tags>
</kw>
<kw name="Position">
<arguments>
<arg>x=None</arg>
<arg>y=None</arg>
</arguments>
<doc>Returns the current xy coordinates of the mouse cursor as a two-integer
tuple.

Args:
  x (int, None, optional) - If not None, this argument overrides the x in
    the return value.
  y (int, None, optional) - If not None, this argument overrides the y in
    the return value.

Returns:
  (x, y) tuple of the current xy coordinates of the mouse cursor.

NOTE: The position() functon doesn't check for failsafe.</doc>
<tags>
</tags>
</kw>
<kw name="Press">
<arguments>
<arg>keys</arg>
<arg>presses=1</arg>
<arg>interval=0.0</arg>
<arg>pause=None</arg>
<arg>logScreenshot=None</arg>
<arg>_pause=True</arg>
</arguments>
<doc>Performs a keyboard key press down, followed by a release.

Args:
  key (str, list): The key to be pressed. The valid names are listed in
  KEYBOARD_KEYS. Can also be a list of such strings.
  presses (integer, optiional): the number of press repetition
  1 by default, for just one press
  interval (float, optional): How many seconds between each press.
  0.0 by default, for no pause between presses.
  pause (float, optional): How many seconds in the end of function process.
  None by default, for no pause in the end of function process.
Returns:
  None</doc>
<tags>
</tags>
</kw>
<kw name="Prompt">
<arguments>
<arg>text=</arg>
<arg>title=</arg>
<arg>default=</arg>
<arg>root=None</arg>
<arg>timeout=None</arg>
</arguments>
<doc>Displays a message box with text input, and OK &amp; Cancel buttons. Returns the text entered, or None if Cancel was clicked.</doc>
<tags>
</tags>
</kw>
<kw name="Right Click">
<arguments>
<arg>x=None</arg>
<arg>y=None</arg>
<arg>interval=0.0</arg>
<arg>duration=0.0</arg>
<arg>tween=&lt;function linear at 0x08CCA8A0&gt;</arg>
<arg>pause=None</arg>
<arg>logScreenshot=None</arg>
<arg>_pause=True</arg>
</arguments>
<doc>Performs a right mouse button click.

This is a wrapper function for click('right', x, y).

The x and y parameters detail where the mouse event happens. If None, the
current mouse position is used. If a float value, it is rounded down. If
outside the boundaries of the screen, the event happens at edge of the
screen.

Args:
  x (int, float, None, tuple, optional): The x position on the screen where the
    click happens. None by default. If tuple, this is used for x and y.
    If x is a str, it's considered a filename of an image to find on
    the screen with locateOnScreen() and click the center of.
  y (int, float, None, optional): The y position on the screen where the
    click happens. None by default.
  interval (float, optional): The number of seconds in between each click,
    if the number of clicks is greater than 1. 0.0 by default, for no
    pause in between clicks.

Returns:
  None</doc>
<tags>
</tags>
</kw>
<kw name="Screenshot">
<arguments>
<arg>imageFilename=None</arg>
<arg>region=None</arg>
</arguments>
<doc></doc>
<tags>
</tags>
</kw>
<kw name="Scroll">
<arguments>
<arg>clicks</arg>
<arg>x=None</arg>
<arg>y=None</arg>
<arg>pause=None</arg>
<arg>logScreenshot=None</arg>
<arg>_pause=True</arg>
</arguments>
<doc>Performs a scroll of the mouse scroll wheel.

Whether this is a vertical or horizontal scroll depends on the underlying
operating system.

The x and y parameters detail where the mouse event happens. If None, the
current mouse position is used. If a float value, it is rounded down. If
outside the boundaries of the screen, the event happens at edge of the
screen.

Args:
  clicks (int, float): The amount of scrolling to perform.
  x (int, float, None, tuple, optional): The x position on the screen where the
    click happens. None by default. If tuple, this is used for x and y.
  y (int, float, None, optional): The y position on the screen where the
    click happens. None by default.

Returns:
  None</doc>
<tags>
</tags>
</kw>
<kw name="Size">
<arguments>
</arguments>
<doc>Returns the width and height of the screen as a two-integer tuple.

Returns:
  (width, height) tuple of the screen size, in pixels.</doc>
<tags>
</tags>
</kw>
<kw name="Sleep">
<arguments>
<arg>seconds</arg>
</arguments>
<doc></doc>
<tags>
</tags>
</kw>
<kw name="Triple Click">
<arguments>
<arg>x=None</arg>
<arg>y=None</arg>
<arg>interval=0.0</arg>
<arg>button=left</arg>
<arg>duration=0.0</arg>
<arg>tween=&lt;function linear at 0x08CCA8A0&gt;</arg>
<arg>pause=None</arg>
<arg>logScreenshot=None</arg>
<arg>_pause=True</arg>
</arguments>
<doc>Performs a triple click..

This is a wrapper function for click('left', x, y, 3, interval).

The x and y parameters detail where the mouse event happens. If None, the
current mouse position is used. If a float value, it is rounded down. If
outside the boundaries of the screen, the event happens at edge of the
screen.

Args:
  x (int, float, None, tuple, optional): The x position on the screen where the
    click happens. None by default. If tuple, this is used for x and y.
    If x is a str, it's considered a filename of an image to find on
    the screen with locateOnScreen() and click the center of.
  y (int, float, None, optional): The y position on the screen where the
    click happens. None by default.
  interval (float, optional): The number of seconds in between each click,
    if the number of clicks is greater than 1. 0.0 by default, for no
    pause in between clicks.
  button (str, int, optional): The mouse button released. TODO

Returns:
  None

Raises:
  ValueError: If button is not one of 'left', 'middle', 'right', 1, 2, 3, 4,
    5, 6, or 7</doc>
<tags>
</tags>
</kw>
<kw name="Typewrite">
<arguments>
<arg>message</arg>
<arg>interval=0.0</arg>
<arg>pause=None</arg>
<arg>logScreenshot=None</arg>
<arg>_pause=True</arg>
</arguments>
<doc>Performs a keyboard key press down, followed by a release, for each of
the characters in message.

The message argument can also be list of strings, in which case any valid
keyboard name can be used.

Since this performs a sequence of keyboard presses and does not hold down
keys, it cannot be used to perform keyboard shortcuts. Use the hotkey()
function for that.

Args:
  message (str, list): If a string, then the characters to be pressed. If a
    list, then the key names of the keys to press in order. The valid names
    are listed in KEYBOARD_KEYS.
  interval (float, optional): The number of seconds in between each press.
    0.0 by default, for no pause in between presses.

Returns:
  None</doc>
<tags>
</tags>
</kw>
<kw name="Use Image Not Found Exception">
<arguments>
<arg>value=None</arg>
</arguments>
<doc></doc>
<tags>
</tags>
</kw>
<kw name="Vscroll">
<arguments>
<arg>clicks</arg>
<arg>x=None</arg>
<arg>y=None</arg>
<arg>pause=None</arg>
<arg>logScreenshot=None</arg>
<arg>_pause=True</arg>
</arguments>
<doc>Performs an explicitly vertical scroll of the mouse scroll wheel,
if this is supported by the operating system. (Currently just Linux.)

The x and y parameters detail where the mouse event happens. If None, the
current mouse position is used. If a float value, it is rounded down. If
outside the boundaries of the screen, the event happens at edge of the
screen.

Args:
  clicks (int, float): The amount of scrolling to perform.
  x (int, float, None, tuple, optional): The x position on the screen where the
    click happens. None by default. If tuple, this is used for x and y.
  y (int, float, None, optional): The y position on the screen where the
    click happens. None by default.

Returns:
  None</doc>
<tags>
</tags>
</kw>
<kw name="Write">
<arguments>
<arg>message</arg>
<arg>interval=0.0</arg>
<arg>pause=None</arg>
<arg>logScreenshot=None</arg>
<arg>_pause=True</arg>
</arguments>
<doc>Performs a keyboard key press down, followed by a release, for each of
the characters in message.

The message argument can also be list of strings, in which case any valid
keyboard name can be used.

Since this performs a sequence of keyboard presses and does not hold down
keys, it cannot be used to perform keyboard shortcuts. Use the hotkey()
function for that.

Args:
  message (str, list): If a string, then the characters to be pressed. If a
    list, then the key names of the keys to press in order. The valid names
    are listed in KEYBOARD_KEYS.
  interval (float, optional): The number of seconds in between each press.
    0.0 by default, for no pause in between presses.

Returns:
  None</doc>
<tags>
</tags>
</kw>
</keywordspec>
